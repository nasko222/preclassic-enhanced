package com.mojang.minecraft.render.md3;

import com.mojang.minecraft.render.md3.MD3Frame;
import com.mojang.minecraft.render.md3.MD3Model;
import com.mojang.minecraft.render.md3.MD3Shader;
import com.mojang.minecraft.render.md3.MD3Surface;
import com.mojang.minecraft.render.md3.MD3Tag;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.HashMap;

public class MD3Loader {

   private static String a(ByteBuffer var0, int var1) {
      byte[] var2 = new byte[var1];
      var0.get(var2);

      for(int var3 = 0; var3 < var2.length; ++var3) {
         if(var2[var3] == 0) {
            return new String(var2, 0, var3);
         }
      }

      return new String(var2);
   }

   private MD3Model load(ByteBuffer var1) throws IOException {
      var1.order(ByteOrder.LITTLE_ENDIAN);
      if(!readString(var1, 4).equals("IDP3")) {
         throw new IOException("Not a valid MD3 file (bad magic number)");
      } else {
         MD3Model var2 = new MD3Model();
         var1.getInt();
         readString(var1, 64);
         var1.getInt();
         int var3 = var1.getInt();
         System.out.println(var3 + " frames");
         int var4 = var1.getInt();
         int var5 = var1.getInt();
         var1.getInt();
         int var6 = var1.getInt();
         var1.getInt();
         int var7 = var1.getInt();
         var1.getInt();
         var2.animFrames = var3;
         var2.frames = new MD3Frame[var3];
         var2.tags = new HashMap();
         var2.surfaces = new MD3Surface[var5];
         var1.position(var6);

         for(int var8 = 0; var8 < var3; ++var8) {
            MD3Frame var9 = new MD3Frame();
            var9.radius = var1.getFloat();
            var9.name = readString(var1, 16);
            var2.frames[var8] = var9;
         }

         MD3Tag[] var14 = new MD3Tag[var4];

         int var15;
         for(var15 = 0; var15 < var4; ++var15) {
            var14[var15] = new MD3Tag(var3);
         }

         for(var15 = 0; var15 < var3; ++var15) {
            MD3Tag[] var10 = var14;
            int var11 = var14.length;

            for(int var12 = 0; var12 < var11; ++var12) {
               MD3Tag var13 = var10[var12];
               var13.name = readString(var1, 64);
            }
         }

         for(var15 = 0; var15 < var4; ++var15) {
            var2.tags.put(var14[var15].name, var14[var15]);
         }

         var1.position(var7);

         for(var15 = 0; var15 < var5; ++var15) {
            var2.surfaces[var15] = this.loadSurface(var1);
         }

         return var2;
      }
   }

   private MD3Surface loadSurface(ByteBuffer var1) throws IOException {
      int var2 = var1.position();
      if(!readString(var1, 4).equals("IDP3")) {
         throw new IOException("Not a valid MD3 file (bad surface magic number)");
      } else {
         String var3 = readString(var1, 64);
         System.out.println("Name: " + var3);
         var1.getInt();
         int var4 = var1.getInt();
         int var5 = var1.getInt();
         int var6 = var1.getInt();
         int var7 = var1.getInt();
         MD3Surface var8 = new MD3Surface(var7, var6, var4);
         int var9 = var1.getInt() + var2;
         int var10 = var1.getInt() + var2;
         int var11 = var1.getInt() + var2;
         var2 += var1.getInt();
         var1.getInt();
         var8.verts = var6;
         var8.shaders = new MD3Shader[var5];
         System.out.println("Triangles: " + var7);
         System.out.println("OFS_SHADERS: " + var10 + " (current location: " + var1.position() + ")");
         var1.position(var10);

         int var12;
         for(var12 = 0; var12 < var5; ++var12) {
            MD3Shader var13 = new MD3Shader();
            readString(var1, 64);
            var1.getInt();
            var8.shaders[var12] = var13;
         }

         System.out.println("OFS_TRIANGLES: " + var9 + " (current location: " + var1.position() + ")");
         var1.position(var9);

         for(var12 = 0; var12 < var7 * 3; ++var12) {
            var8.triangles.put(var1.getInt());
         }

         System.out.println("OFS_ST: " + var11 + " (current location: " + var1.position() + ")");
         var1.position(var11);

         for(var12 = 0; var12 < var6 << 1; ++var12) {
            var8.d.put(var1.getFloat());
         }

         System.out.println("OFS_XYZ_NORMAL: " + var2 + " (current location: " + var1.position() + ")");
         var1.position(var2);

         for(var12 = 0; var12 < var6 * var4; ++var12) {
            var8.vertices.put((float)var1.getShort() / 64.0F);
            var8.vertices.put((float)var1.getShort() / 64.0F);
            var8.vertices.put((float)var1.getShort() / 64.0F);
            double var20 = (double)(var1.get() & 255) * 3.141592653589793D * 2.0D / 255.0D;
            double var15 = (double)(var1.get() & 255) * 3.141592653589793D * 2.0D / 255.0D;
            float var17 = (float)(Math.cos(var15) * Math.sin(var20));
            float var18 = (float)(Math.sin(var15) * Math.sin(var20));
            float var19 = (float)Math.cos(var20);
            var8.normals.put(var17);
            var8.normals.put(var18);
            var8.normals.put(var19);
         }

         return var8;
      }
   }

   private static String readString(ByteBuffer var0, int var1) {
      byte[] var2 = new byte[var1];
      var0.get(var2);

      for(int var3 = 0; var3 < var2.length; ++var3) {
         if(var2[var3] == 0) {
            return new String(var2, 0, var3);
         }
      }

      return new String(var2);
   }

   public final MD3Model newLoad(String var1) throws IOException {
      DataInputStream var2 = new DataInputStream(MD3Loader.class.getResourceAsStream(var1));
      ByteArrayOutputStream var3 = new ByteArrayOutputStream();
      byte[] var4 = new byte[4096];

      while(true) {
         int var5 = var2.read(var4);
         if(var5 < 0) {
            var2.close();
            var3.close();
            return this.load(ByteBuffer.wrap(var3.toByteArray()));
         }

         var3.write(var4, 0, var5);
      }
   }
}
