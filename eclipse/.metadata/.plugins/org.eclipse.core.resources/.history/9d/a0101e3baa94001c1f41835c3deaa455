package com.mojang.minecraft.level.tile;

import com.mojang.minecraft.level.Level;
import com.mojang.minecraft.level.Tesselator;
import com.mojang.minecraft.particle.Particle;
import com.mojang.minecraft.particle.ParticleEngine;
import com.mojang.minecraft.phys.AABB;
import java.util.Random;

public class Tile {
	public static final Tile[] tiles = new Tile[256];
	public static final Tile empty = null;
	public static final Tile rock = new Tile(1, 1);
	public static final Tile grass = new GrassTile(2);
	public static final Tile dirt = new DirtTile(3, 2);
	public static final Tile stoneBrick = new Tile(4, 16);
	public static final Tile wood = new Tile(5, 4);
	public static final Tile bush = new Bush(6);
	
			public static final Tile newBlock1 = new Tile(7, 17);
			public static final Tile newBlock2 = new Tile(8, 18);
			public static final Tile newBlock3 = new Tile(9, 19);
			public static final Tile newBlock4 = new Tile(10, 20);
			public static final Tile newBlock5 = new Tile(11, 21);
			public static final Tile newBlock6 = new Tile(12, 22);
			public static final Tile newBlock7 = new Tile(13, 23);
			public static final Tile newBlock8 = new Tile(14, 24);
			public static final Tile newBlock9 = new Tile(15, 25);
			public static final Tile newBlock10 = new Tile(16, 26);
			public static final Tile newBlock11 = new Tile(17, 27);
			public static final Tile newBlock12 = new Tile(18, 28);
			public static final Tile newBlock13 = new Tile(19, 29);
			public static final Tile newBlock14 = new Tile(20, 30);
			public static final Tile newBlock15 = new Tile(21, 31);
			public static final Tile newBlock16 = new Tile(22, 32);
			public static final Tile newBlock17 = new Tile(23, 33);
			public static final Tile newBlock18 = new Tile(24, 34);
			public static final Tile newBlock19 = new Tile(25, 35);
			public static final Tile newBlock20 = new Tile(26, 36);
			public static final Tile newBlock21 = new Tile(27, 37);
			public static final Tile newBlock22 = new Tile(28, 38);
			public static final Tile newBlock23 = new Tile(29, 39);
			public static final Tile newBlock24 = new Tile(30, 40);
			public static final Tile newBlock25 = new Tile(31, 41);
			public static final Tile newBlock26 = new Tile(32, 42);
			public static final Tile newBlock27 = new Tile(33, 43);
			public static final Tile newBlock28 = new Tile(34, 44);
			public static final Tile newBlock29 = new Tile(35, 45);
			public static final Tile newBlock30 = new Tile(36, 46);
			public static final Tile newBlock31 = new Tile(37, 47);
			public static final Tile newBlock32 = new Tile(38, 48);
			public static final Tile newBlock33 = new Tile(39, 49);
			public static final Tile newBlock34 = new Tile(40, 50);
			public static final Tile newBlock35 = new Tile(41, 51);
			public static final Tile newBlock36 = new Tile(42, 52);
			public static final Tile newBlock37 = new Tile(43, 53);
			public static final Tile newBlock38 = new Tile(44, 54);
			public static final Tile newBlock39 = new Tile(45, 55);
			public static final Tile newBlock40 = new Tile(46, 56);
			public static final Tile newBlock41 = new Tile(47, 57);
			public static final Tile newBlock42 = new Tile(48, 58);
			public static final Tile newBlock43 = new Tile(49, 59);
			public static final Tile newBlock44 = new Tile(50, 60);
			public static final Tile newBlock45 = new Tile(51, 61);
			public static final Tile newBlock46 = new Tile(52, 62);
			public static final Tile newBlock47 = new Tile(53, 63);
			public static final Tile newBlock48 = new Tile(54, 64);
			public static final Tile newBlock49 = new Tile(55, 65);
			public static final Tile newBlock50 = new Tile(56, 66);
			public static final Tile newBlock51 = new Tile(57, 67);
			public static final Tile newBlock52 = new Tile(58, 68);
			public static final Tile newBlock53 = new Tile(59, 69);
			public static final Tile newBlock54 = new Tile(60, 70);
			public static final Tile newBlock55 = new Tile(61, 71);
			public static final Tile newBlock56 = new Tile(62, 72);
			public static final Tile newBlock57 = new Tile(63, 73);
			public static final Tile newBlock58 = new Tile(64, 74);
			public static final Tile newBlock59 = new Tile(65, 75);
			public static final Tile newBlock60 = new Tile(66, 76);
			public static final Tile newBlock61 = new Tile(67, 77);
			public static final Tile newBlock62 = new Tile(68, 78);
			public static final Tile newBlock63 = new Tile(69, 79);
			public static final Tile newBlock64 = new Tile(70, 80);
			public static final Tile newBlock65 = new Tile(71, 81);
			public static final Tile newBlock66 = new Tile(72, 82);
			public static final Tile newBlock67 = new Tile(73, 83);
			public static final Tile newBlock68 = new Tile(74, 84);
			public static final Tile newBlock69 = new Tile(75, 85);
			public static final Tile newBlock70 = new Tile(76, 86);
			public static final Tile newBlock71 = new Tile(77, 87);
			public static final Tile newBlock72 = new Tile(78, 88);
			public static final Tile newBlock73 = new Tile(79, 89);
			public static final Tile newBlock74 = new Tile(80, 90);
			public static final Tile newBlock75 = new Tile(81, 91);
			public static final Tile newBlock76 = new Tile(82, 92);
			public static final Tile newBlock77 = new Tile(83, 93);
			public static final Tile newBlock78 = new Tile(84, 94);
			public static final Tile newBlock79 = new Tile(85, 95);
			public static final Tile newBlock80 = new Tile(86, 96);
			public static final Tile newBlock81 = new Tile(87, 97);
			public static final Tile newBlock82 = new Tile(88, 98);
			public static final Tile newBlock83 = new Tile(89, 99);
			public static final Tile newBlock84 = new Tile(90, 100);
			public static final Tile newBlock85 = new Tile(91, 101);
			public static final Tile newBlock86 = new Tile(92, 102);
			public static final Tile newBlock87 = new Tile(93, 103);
			public static final Tile newBlock88 = new Tile(94, 104);
			public static final Tile newBlock89 = new Tile(95, 105);
			public static final Tile newBlock90 = new Tile(96, 106);
			public static final Tile newBlock91 = new Tile(97, 107);
			public static final Tile newBlock92 = new Tile(98, 108);
			public static final Tile newBlock93 = new Tile(99, 109);
			public static final Tile newBlock94 = new Tile(100, 110);
			public static final Tile newBlock95 = new Tile(101, 111);
			public static final Tile newBlock96 = new Tile(102, 112);
			public static final Tile newBlock97 = new Tile(103, 113);
			public static final Tile newBlock98 = new Tile(104, 114);
			public static final Tile newBlock99 = new Tile(105, 115);
	
	public int tex;
	public final int id;

	
	
	protected Tile(int id) {
		tiles[id] = this;
		this.id = id;
	}

	public Tile(int id, int tex) {
		this(id);
		this.tex = tex;
	}

	public void render(Tesselator t, Level level, int layer, int x, int y, int z) {
		float c1 = 1.0F;
		float c2 = 0.8F;
		float c3 = 0.6F;
		if(this.shouldRenderFace(level, x, y - 1, z, layer)) {
			t.color(c1, c1, c1);
			this.renderFace(t, x, y, z, 0);
		}

		if(this.shouldRenderFace(level, x, y + 1, z, layer)) {
			t.color(c1, c1, c1);
			this.renderFace(t, x, y, z, 1);
		}

		if(this.shouldRenderFace(level, x, y, z - 1, layer)) {
			t.color(c2, c2, c2);
			this.renderFace(t, x, y, z, 2);
		}

		if(this.shouldRenderFace(level, x, y, z + 1, layer)) {
			t.color(c2, c2, c2);
			this.renderFace(t, x, y, z, 3);
		}

		if(this.shouldRenderFace(level, x - 1, y, z, layer)) {
			t.color(c3, c3, c3);
			this.renderFace(t, x, y, z, 4);
		}

		if(this.shouldRenderFace(level, x + 1, y, z, layer)) {
			t.color(c3, c3, c3);
			this.renderFace(t, x, y, z, 5);
		}

	}

	private boolean shouldRenderFace(Level level, int x, int y, int z, int layer) {
		return !level.isSolidTile(x, y, z) && level.isLit(x, y, z) ^ layer == 1;
	}

	protected int getTexture(int face) {
		return this.tex;
	}

	public void renderFace(Tesselator t, int x, int y, int z, int face) {
		int tex = this.getTexture(face);
		float u0 = (float)(tex % 16) / 16.0F;
		float u1 = u0 + 0.0624375F;
		float v0 = (float)(tex / 16) / 16.0F;
		float v1 = v0 + 0.0624375F;
		float x0 = (float)x + 0.0F;
		float x1 = (float)x + 1.0F;
		float y0 = (float)y + 0.0F;
		float y1 = (float)y + 1.0F;
		float z0 = (float)z + 0.0F;
		float z1 = (float)z + 1.0F;
		if(face == 0) {
			t.vertexUV(x0, y0, z1, u0, v1);
			t.vertexUV(x0, y0, z0, u0, v0);
			t.vertexUV(x1, y0, z0, u1, v0);
			t.vertexUV(x1, y0, z1, u1, v1);
		}

		if(face == 1) {
			t.vertexUV(x1, y1, z1, u1, v1);
			t.vertexUV(x1, y1, z0, u1, v0);
			t.vertexUV(x0, y1, z0, u0, v0);
			t.vertexUV(x0, y1, z1, u0, v1);
		}

		if(face == 2) {
			t.vertexUV(x0, y1, z0, u1, v0);
			t.vertexUV(x1, y1, z0, u0, v0);
			t.vertexUV(x1, y0, z0, u0, v1);
			t.vertexUV(x0, y0, z0, u1, v1);
		}

		if(face == 3) {
			t.vertexUV(x0, y1, z1, u0, v0);
			t.vertexUV(x0, y0, z1, u0, v1);
			t.vertexUV(x1, y0, z1, u1, v1);
			t.vertexUV(x1, y1, z1, u1, v0);
		}

		if(face == 4) {
			t.vertexUV(x0, y1, z1, u1, v0);
			t.vertexUV(x0, y1, z0, u0, v0);
			t.vertexUV(x0, y0, z0, u0, v1);
			t.vertexUV(x0, y0, z1, u1, v1);
		}

		if(face == 5) {
			t.vertexUV(x1, y0, z1, u0, v1);
			t.vertexUV(x1, y0, z0, u1, v1);
			t.vertexUV(x1, y1, z0, u1, v0);
			t.vertexUV(x1, y1, z1, u0, v0);
		}

	}

	public void renderFaceNoTexture(Tesselator t, int x, int y, int z, int face) {
		float x0 = (float)x + 0.0F;
		float x1 = (float)x + 1.0F;
		float y0 = (float)y + 0.0F;
		float y1 = (float)y + 1.0F;
		float z0 = (float)z + 0.0F;
		float z1 = (float)z + 1.0F;
		if(face == 0) {
			t.vertex(x0, y0, z1);
			t.vertex(x0, y0, z0);
			t.vertex(x1, y0, z0);
			t.vertex(x1, y0, z1);
		}

		if(face == 1) {
			t.vertex(x1, y1, z1);
			t.vertex(x1, y1, z0);
			t.vertex(x0, y1, z0);
			t.vertex(x0, y1, z1);
		}

		if(face == 2) {
			t.vertex(x0, y1, z0);
			t.vertex(x1, y1, z0);
			t.vertex(x1, y0, z0);
			t.vertex(x0, y0, z0);
		}

		if(face == 3) {
			t.vertex(x0, y1, z1);
			t.vertex(x0, y0, z1);
			t.vertex(x1, y0, z1);
			t.vertex(x1, y1, z1);
		}

		if(face == 4) {
			t.vertex(x0, y1, z1);
			t.vertex(x0, y1, z0);
			t.vertex(x0, y0, z0);
			t.vertex(x0, y0, z1);
		}

		if(face == 5) {
			t.vertex(x1, y0, z1);
			t.vertex(x1, y0, z0);
			t.vertex(x1, y1, z0);
			t.vertex(x1, y1, z1);
		}

	}

	public final AABB getTileAABB(int x, int y, int z) {
		return new AABB((float)x, (float)y, (float)z, (float)(x + 1), (float)(y + 1), (float)(z + 1));
	}

	public AABB getAABB(int x, int y, int z) {
		return new AABB((float)x, (float)y, (float)z, (float)(x + 1), (float)(y + 1), (float)(z + 1));
	}

	public boolean blocksLight() {
		return true;
	}

	public boolean isSolid() {
		return true;
	}

	public void tick(Level level, int x, int y, int z, Random random) {
	}

	public void destroy(Level level, int x, int y, int z, ParticleEngine particleEngine) {
		byte SD = 4;

		for(int xx = 0; xx < SD; ++xx) {
			for(int yy = 0; yy < SD; ++yy) {
				for(int zz = 0; zz < SD; ++zz) {
					float xp = (float)x + ((float)xx + 0.5F) / (float)SD;
					float yp = (float)y + ((float)yy + 0.5F) / (float)SD;
					float zp = (float)z + ((float)zz + 0.5F) / (float)SD;
					particleEngine.add(new Particle(level, xp, yp, zp, xp - (float)x - 0.5F, yp - (float)y - 0.5F, zp - (float)z - 0.5F, this.tex));
				}
			}
		}

	}
}
